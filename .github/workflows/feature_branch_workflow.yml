name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  # Explore-GitHub-Actions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  #     - name: Check out repository code
  #       uses: actions/checkout@v4
  #     - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
  #     - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
  #     - name: List files in the repository
  #       run: |
  #         ls ${{ github.workspace }}
  #     - run: echo "üçè This job's status is ${{ job.status }}."

  # build:
  #   runs-on: ubuntu-latest
  #   needs: Explore-GitHub-Actions
  #   steps:
  #     - run: echo "Code build"

  # lint:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - run: echo "Code lint"

  # unittest:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - run: echo "Code unittest"

  # configure-secrets:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Retrieve secret
  #       env:
  #         super_secret: ${{ secrets.SUPERSECRET }}
  #       run: |
  #         echo "$super_secret"

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [lint, unittest, configure-secrets]
  #   steps:
  #     - run: echo "deploy"

# generate a default pipeline for python code, based on the file structure
  python-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  python-lint:
    runs-on: ubuntu-latest
    needs: python-setup
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  python-test:
    runs-on: ubuntu-latest
    needs: python-setup
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Run tests
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
          pytest


  docker-build:
    runs-on: ubuntu-latest
    needs: [python-lint, python-test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/python-app:latest,${{ secrets.DOCKER_USERNAME }}/python-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  minikube-setup:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Install Minikube
        run: |
          # Download Minikube binary
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          # Start Minikube
          minikube start --driver=docker
          
          # Verify installation
          minikube status

  deploy-and-test:
    runs-on: ubuntu-latest
    needs: minikube-setup
    steps:
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Start Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker

      - name: Deploy to Minikube
        run: |
          # Pull the image we just pushed
          docker pull ${{ secrets.DOCKER_USERNAME }}/python-app:${{ github.sha }}
          
          # Create a deployment
          kubectl create deployment python-app --image=${{ secrets.DOCKER_USERNAME }}/python-app:${{ github.sha }}
          
          # Wait for deployment to be available
          kubectl rollout status deployment/python-app --timeout=120s
          
          # Expose the deployment
          kubectl expose deployment python-app --type=NodePort --port=5000

      - name: Test Deployment
        run: |
          # Wait for pod to be ready (with retry logic)
          for i in {1..30}; do
            if kubectl get pods -l app=python-app | grep -q "Running"; then
              break
            fi
            echo "Waiting for pod to be ready... attempt $i"
            sleep 10
          done
          
          # Verify pod is actually running
          if ! kubectl get pods -l app=python-app | grep -q "Running"; then
            echo "Pod failed to reach Running state"
            kubectl get pods -l app=python-app -o wide
            exit 1
          fi
          
          # Get the URL and test the endpoints
          MINIKUBE_URL=$(minikube service python-app --url)
          
          # Add delay to ensure service is ready
          sleep 10
          
          # Test endpoints with better error handling
          echo "Testing root endpoint..."
          curl -f $MINIKUBE_URL/ || exit 1
          
          echo "Testing sum endpoint..."
          curl -f $MINIKUBE_URL/sum/2/3 || exit 1
          
          echo "Testing subtract endpoint..."
          curl -f $MINIKUBE_URL/subtract/5/3 || exit 1

      - name: Cleanup
        if: always()
        run: |
          kubectl delete service python-app
          kubectl delete deployment python-app
          minikube delete
